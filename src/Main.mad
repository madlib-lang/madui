import { Wish, fulfill } from "Wish"
import { fromList, get } from "Dictionary"
import { fromMaybe } from "Maybe"

#-
import { init } from "snabbdom/init"
import { h } from 'snabbdom/h'
import { attributesModule } from 'snabbdom/modules/attributes'
import { propsModule } from 'snabbdom/modules/props'
import { eventListenersModule } from 'snabbdom/modules/eventlisteners'

const AppEnv = {
  patch: null,
  currentElement: null,
  currentState: null,
  rootView: null,
  onUrlChangedAction: null,
}
-#

export type Element = Element

export alias View a = a -> Element

// https://keycode.info/
export type Key
  = KEY_ENTER
  | KEY_BACKSPACE
  | KEY_ANY

KEY_CODE_MAPPINGS = fromList([
  <13, KEY_ENTER>,
  <8, KEY_BACKSPACE>,
])

getKeyFromCode :: Number -> Key
getKeyFromCode = (keyCode) => fromMaybe(KEY_ANY, get(keyCode, KEY_CODE_MAPPINGS))

export type Event
  = AbstractEvent { eventType :: String }
  | ClickEvent { eventType :: String }
  | InputEvent { eventType :: String, target :: { value :: String } }
  | KeyPressEvent { eventType :: String, key :: Key }
  | UrlEvent { url :: String }

#-
const buildKeyPressEvent = event => {
  const key = getKeyFromCode(event.keyCode, KEY_CODE_MAPPINGS)

  return KeyPressEvent({ ...event, key })
}

const EventConstructors = Object.freeze({
  mouseout: AbstractEvent,
  mouseover: AbstractEvent,
  change: AbstractEvent,
  click: ClickEvent,
  input: InputEvent,
  keypress: buildKeyPressEvent
})
-#



export alias Action a = a -> Event -> List (Wish (a -> a) (a -> a))


type Attribute
  = AttributeId String
  | AttributeClass String
  | AttributeValue String
  | AttributePlaceholder String
  | AttributeType String
  | AttributeKey String
  | AttributeHref String
  | AttributeSrc String
  | AttributeTitle String
  | AttributeAlt String
  | AttributeTo String
  | AttributeOnClick (Action a)
  | AttributeOnMouseOver (Action a)
  | AttributeOnMouseOut (Action a)
  | AttributeOnChange (Action a)
  | AttributeOnInput (Action a)
  | AttributeOnKeyPress (Action a)


#-
const getCurrentState = () => AppEnv.currentState

const runAction = updater => {
  AppEnv.currentState = updater(getCurrentState())
  const newElement = AppEnv.rootView(AppEnv.currentState)
  AppEnv.patch(AppEnv.currentElement, newElement)
  AppEnv.currentElement = newElement
}

const wrapEventHandler = (ctor, handler) => {
  return event => {
    event.eventType = event.type
    // So now calling an event handler gives us a list of wishes
    const wishes = handler(AppEnv.currentState)(ctor(event))
    wishes.forEach(fulfill(runAction)(runAction))
  }
}

const getAttributeTuple = attr =>
  [attr.__constructor.substr(9).toLowerCase(), attr.__args[0]]

const ATTR_NAMES = [
  "id",
  "class",
  "placeholder",
  "type",
  "href",
  "src",
  "alt",
  "title"
]
const PROP_NAMES = [
  "value"
]

const objectifyAttrs = attrs => attrs.reduce((obj, attr) => {
  const [attrName, attrValue] = getAttributeTuple(attr)
  if (attrName === "key") {
    return { ...obj, key: attrValue }
  } else if (ATTR_NAMES.includes(attrName)) {
    return { ...obj, attrs: { ...obj.attrs, [attrName]: attrValue }}
  } else if (PROP_NAMES.includes(attrName)) {
    return { ...obj, props: { ...obj.props, [attrName]: attrValue }}
  } else if (attrName.substr(0, 2) === "on") {
    const eventName = attrName.substr(2)
    const ctor = EventConstructors[eventName]
    return { ...obj, on: { ...obj.on, [eventName]: wrapEventHandler(ctor, attrValue) }}
  } else {
    return { ...obj, [attrName]: attrValue };
  }
}, {})
-#




id :: String -> Attribute
export id = AttributeId

className :: String -> Attribute
export className = AttributeClass

key :: String -> Attribute
export key = AttributeKey

value :: String -> Attribute
export value = AttributeValue

placeholder :: String -> Attribute
export placeholder = AttributePlaceholder

inputType :: String -> Attribute
export inputType = AttributeType

to :: String -> Attribute
export to = AttributeTo

href :: String -> Attribute
export href = AttributeHref

src :: String -> Attribute
export src = AttributeSrc

title :: String -> Attribute
export title = AttributeTitle

alt :: String -> Attribute
export alt = AttributeAlt



onClick :: (Action a) -> Attribute
export onClick = AttributeOnClick

onMouseOver :: (Action a) -> Attribute
export onMouseOver = AttributeOnMouseOver

onMouseOut :: (Action a) -> Attribute
export onMouseOut = AttributeOnMouseOut

onChange :: (Action a) -> Attribute
export onChange = AttributeOnChange

onInput :: (Action a) -> Attribute
export onInput = AttributeOnInput

onKeyPress :: Action a -> Attribute
export onKeyPress = AttributeOnKeyPress



text :: String -> Element
export text = (content) => #- content -#

div :: List Attribute -> List Element -> Element
export div = (attrs, children) => #- h("div", objectifyAttrs(attrs), children) -#

span :: List Attribute -> List Element -> Element
export span = (attrs, children) => #- h("span", objectifyAttrs(attrs), children) -#

strong :: List Attribute -> List Element -> Element
export strong = (attrs, children) => #- h("strong", objectifyAttrs(attrs), children) -#

i :: List Attribute -> List Element -> Element
export i = (attrs, children) => #- h("i", objectifyAttrs(attrs), children) -#

br :: List Attribute -> List Element -> Element
export br = (attrs, children) => #- h("br", objectifyAttrs(attrs), children) -#


h1 :: List Attribute -> List Element -> Element
export h1 = (attrs, children) => #- h("h1", objectifyAttrs(attrs), children) -#

h2 :: List Attribute -> List Element -> Element
export h2 = (attrs, children) => #- h("h2", objectifyAttrs(attrs), children) -#

h3 :: List Attribute -> List Element -> Element
export h3 = (attrs, children) => #- h("h3", objectifyAttrs(attrs), children) -#

h4 :: List Attribute -> List Element -> Element
export h4 = (attrs, children) => #- h("h4", objectifyAttrs(attrs), children) -#

h5 :: List Attribute -> List Element -> Element
export h5 = (attrs, children) => #- h("h5", objectifyAttrs(attrs), children) -#

h6 :: List Attribute -> List Element -> Element
export h6 = (attrs, children) => #- h("h6", objectifyAttrs(attrs), children) -#

p :: List Attribute -> List Element -> Element
export p = (attrs, children) => #- h("p", objectifyAttrs(attrs), children) -#

blockquote :: List Attribute -> List Element -> Element
export blockquote = (attrs, children) => #- h("blockquote", objectifyAttrs(attrs), children) -#

code :: List Attribute -> List Element -> Element
export code = (attrs, children) => #- h("code", objectifyAttrs(attrs), children) -#

ul :: List Attribute -> List Element -> Element
export ul = (attrs, children) => #- h("ul", objectifyAttrs(attrs), children) -#

ol :: List Attribute -> List Element -> Element
export ol = (attrs, children) => #- h("ol", objectifyAttrs(attrs), children) -#

li :: List Attribute -> List Element -> Element
export li = (attrs, children) => #- h("li", objectifyAttrs(attrs), children) -#


header :: List Attribute -> List Element -> Element
export header = (attrs, children) => #- h("header", objectifyAttrs(attrs), children) -#

main :: List Attribute -> List Element -> Element
export main = (attrs, children) => #- h("main", objectifyAttrs(attrs), children) -#

section :: List Attribute -> List Element -> Element
export section = (attrs, children) => #- h("section", objectifyAttrs(attrs), children) -#

aside :: List Attribute -> List Element -> Element
export aside = (attrs, children) => #- h("aside", objectifyAttrs(attrs), children) -#

footer :: List Attribute -> List Element -> Element
export footer = (attrs, children) => #- h("footer", objectifyAttrs(attrs), children) -#


empty :: List Attribute -> List Element -> Element
export empty = (attrs, children) => #- null -#



input :: List Attribute -> List Element -> Element
export input = (attrs, children) => #- h("input", objectifyAttrs(attrs), children) -#

button :: List Attribute -> List Element -> Element
export button = (attrs, children) => #- h("button", objectifyAttrs(attrs), children) -#

form :: List Attribute -> List Element -> Element
export form = (attrs, children) => #- h("form", objectifyAttrs(attrs), children) -#

img :: List Attribute -> List Element -> Element
export img = (attrs, children) => #- h("img", objectifyAttrs(attrs), children) -#

a :: List Attribute -> List Element -> Element
export a = (attrs, children) => #- h("a", objectifyAttrs(attrs), children) -#

link :: List Attribute -> List Element -> Element
export link = (attrs, children) => #-{
  const objAttrs = objectifyAttrs(attrs);
  const clickHandler = (event) => {
    event.preventDefault();

    if (objAttrs.to) {
      const builtUrl = document.location.origin + document.location.pathname + '\#' + objAttrs.to

      history.pushState({}, '', builtUrl);

      if (AppEnv.onUrlChangedAction) {
        const wishes = AppEnv.onUrlChangedAction(getCurrentState())(UrlEvent({ url: objAttrs.to }))
        wishes.forEach(fulfill(runAction)(runAction))
      }
    }
  }

  return h("a", { ...objAttrs, on: { click: clickHandler }}, children);
}-#


onUrlChanged :: Action a -> ()
export onUrlChanged = (action) => #-{
  AppEnv.onUrlChangedAction = action

  window.onpopstate = function(event) {
    const path = document.location.hash.substr(1) || "/";
    const wishes = AppEnv.onUrlChangedAction(getCurrentState())(UrlEvent({ url: path }))
    wishes.forEach(fulfill(runAction)(runAction))
    console.log(document.location);
    // alert(`location: ${document.location}, state: ${JSON.stringify(event.state)}`)
  }
}-#


syncAction :: (a -> Event -> a) -> Action a
export syncAction = (stateUpdate) => (
  (state, event) => [of((_) => stateUpdate(state, event))]
)


/**
 * render - boostraps the app and takes a component, and an initial state as parameters
 */
render :: View a -> a -> String -> ()
export render = (view, initialState, containerId) => {
  initialElement = view(initialState)
  #-
  const patch = init([attributesModule, propsModule, eventListenersModule])
  patch(document.getElementById(containerId), initialElement)

  AppEnv.patch = patch
  AppEnv.currentElement = initialElement
  AppEnv.rootView = view
  AppEnv.currentState = initialState
  -#

  return ()
}
